Beers
Coki loves numbers. He also loves beer.

His evil-genious twin Koci, deserted him in a desert. He also left some beers, so Coki can refresh himself.

You can think of the desert as a rectangular field with size NxM.

On any of the cells, there can be a stack of beers.
Coki can move to a next cell and only in 4 directions
Top, left, right and bottom
Each move of Coki takes him 1 time
Each stack of beers refreshes Coki with exactly 5 time
Coki always starts from the top-left corner and the exit is always on the bottom right corner
Help Coki to reach the exit as fast as possible!

Examples


Input
Read from the standard input

On the first line are the numbers N, M and B

N and M are the dimensions of the field
B is the number of stacks of beers
On the next B lines find the coordinates of the stacks of beer
Output
Print to the standard output

On the single line of the output, print the minimal time it takes Coki to reach the exit
Constraints
N and M are always less than 2^22
B is less than 2^14
The time will never be less than 0
Even if you collect all stacks of beers
Sample tests
Input
7 8 3
4 1
7 3
1 6
Output
5
$%$%$%$%$%$Conference
Description
Your manager is sending you to a developer conference and one of your goals is to meet as many programmers from different companies as you can.

There will be N developers attending the conference numbered from 0 to N - 1. Your manager doesn't know each developer's company. The only information he has is that some particular pairs of developers work in the same company.

What you need to do prior to the conference is to compute in how many ways you can pick a pair of developers belonging to different companies, so they can get to know each other. Your manager provided you enough pairs to let you identify the groups of developers even though you might not know their company directly. For example, if 1, 2, 3 are developers from the same company, it is sufficient to mention that (1, 2) and (2, 3) are pairs of developers from the same company without providing information about a third pair (1, 3). If there is no information about a developer you can assume that he is from different (his own) company.

Input
Input is read from the console
On the first line are two integers, N and M, separated by a single space.
Each of the following M lines contains 2 integers separated by a single space X and Y such that 0 <= X, Y <= N - 1 and X and Y are developers from the same company.
Output
Output should be printed on the console
A single line denoting the number of possible ways to choose a pair of developers from different companies.
Constraints
1 <= N <= 100000
1 <= M <= 10000
Time limit: 0.05s
Memory limit: 16 MB
Sample tests
Sample test 1
Input
4 2
0 1
2 3
Output
4
Sample test 2
Input
7 3
0 2
0 3
1 4
Output
17
$%$%$%$%$%$Tubes!
Marto is a well-known Pernik fighter. He has N tubes with different sizes. Marto also has M-1 friends. His friends also need tubes for fighting.

Help Marto to cut his own tubes into exactly M parts with same sizes. This size should be maximal possible (bigger tube = better fighter).

Your task is to write a program that finds the biggest possible size of the M tubes which you can cut from the initial Marto’s tubes.

Input
Read from the standard input
On the first input line your program should read the integer N – the number of Marto’s tubes.
On the second input line there will be the number M – the count of the tubes Marto needs.
On the next N lines your program should read the sizes of the Marto’s tubes Marto.
The input data will always be valid and in the format described. There is no need to check it explicitly.
Output
Print to the standard output

On the only output line you should print the maximal possible size of the M tubes.

If it is impossible to cut the tubes with the given criteria write “-1” on the only output line.
Constraints
N will be between 1 and 20 000, inclusive.

M will be between 1 and 2 000 000 000, inclusive.

The sizes of the tubes will be between 1 and 2 000 000 000, inclusive.

Sample Tests
Input
Copy
3
6
100
200
300
Output
Copy
100
Description
We can cut the tubes into 6 parts (each with size of 100).

Input
Copy
4
11
803
777
444
555
Output
Copy
200
Description
We can cut:

The first tube into 5 parts (200, 200, 200, 200 and 3)
The second tube into 4 parts (200, 200, 200 and 177)
The third tube into 3 parts (200, 200 and 44)
The fourth tube into 3 parts (200, 200 and 155)
After this cuts we have exactly 11 tubes with size of 200. The cuts we made are optimal.

We can’t cut the tubes into 11 parts of size 201.
$%$%$%$%$%$MinMaxSum
You are given a sequence of numbers and a number of groups G.

You task is to find the MinMaxSum, that can be achieved, by splitting the sequence into exactly G subsequences.

MinMaxSum is the minimal possible sum of the sums of all such subsequences (see test explanation for more...);

Input
Read from the standard input

On the first line is a number N

The number of following subsequences
On the next 2*N lines find exactly N couples of lines

Each couple has:
On the first line of the couple are the numbers M and G, separated by a whitespace
M is the number of numbers in the sequence
G is the number of groups
On the second line of the couple are exactly M numbers, separated by a whitespace
Output
Print to the standard output

For each couple print the MinMaxSum

Sample tests
Input
Copy
1
5 2
7 2 5 10 8
Output
Copy
18
Explanation
The possible groups of 2 are:

Copy
(7) and (2, 5, 10, 8) -> MinMaxSum = 25
(7, 2) and (5, 10, 8) -> MinMaxSum = 23
(7, 2, 5) and (10, 8) -> MinMaxSum = 18
(7, 2, 5, 10) and (8) -> MinMaxSum = 24

$%$%$%$%$%$Jungle trees
Description
Steve is tired of people. He is going to live in the jungle.

His preferred way of moving is by jumping from one tree to another. There will be N trees in the jungle. Each tree will have X coordinate and height H. Steve will not be able to jump between trees whose X coordinate difference is more than MJ or height difference is more than MH. He will need your help to get from the leftmost tree (lowest X coordinate) to rightmost one (highest X coordinate). Write a program which finds the minimal amount of jumps needed or prints -1 if it is impossible.

Input
Input is read from the console
Three numbers are read from the first line
N, MJ and MH separated by spaces
Each of the next N lines describes a tree by two space separated numbers
X - coordinate of the tree
H - height of the tree
Output
Output should be printed on the console
Print the minimal amount of jumps needed on a single line
If it is impossible to reach the rightmost tree print -1
Constraints
2 <= N <= 8 000
1 <= MJ <= 1 000 000
1 <= MH <= 1 000 000
For each tree:
-1 000 000 <= X <= 1 000 000
1 <= H <= 1 000 000
Sample tests
Sample test 1
Input
5 10 3
13 1
9 4
4 7
18 5
20 8
Output
3
Sample test 2
Input
2 8 5
-4 9
7 9
Output
-1

$%$%$%$%$%$Coki Skoki
Description
Coki likes to make skok-podskok.

Recently Koci, his evil genius twin, used this weakness of Coki and started making experiments on him. The last experiment was successful and now Coki gained the superpower to make really big skoks (jumps). Now, Coki is known as the masked vigilante Skok, with the cape and underwear-above-the-pants stuff.

He wants to try his newfound powers. He is in the city, and there are really high buildings there. He wants to try to make the longest possible sequence of jumps. Since Coki is still pretty new at this, he can jump only on buildings that are higher than the one he is on, and also there are not higher buildings between. Also, Coki can jump only from left to right.

Help Coki to hone his powers!

The heights of the buildings are represented as a sequence of numbers. You task is to find the longest sequence of jumps that Coki can make, starting from each building.

Input
The input will be read from the standard input

On the first line you will find the number N
The number of buildings
On the second line you will find N numbers, separated by a space
The heights of the buildings
The input will be correct and in the described format, so there is not need to check it explicitly.

Output
The output will be printed on the standard output

On the first line, print the length of the longest sequence of jumps
On the second line, print the lengths of the sequences, starting from each building
Constraints
The buildings will always be less than 103344
Sample Tests
Input
6
1 4 2 6 3 4
Output
2
2 1 1 0 1 0
Input
5
1 1 1 1 1
Output
0
0 0 0 0 0

$%$%$%$%$%$Wooden board
Description
Steve owns a wooden board. He made his board special by writing several visible ASCII characters on it (codes from 33 to 126). The resulting string formed palindrome (it is read the same way backwards).

Unfortunately, one day he broke his wooden board in half and lost one part. Help him to repair his biggest achievement in life, by writing a program which finds the minimum number of characters that need to be appended right of the board to form a palindrome.

Input
Input is read from the console
The characters on the broken wooden board on a single line
Output
Output should be printed on the console
Print a number on a single line - the minimum needed characters
Constraints
1 <= number of characters on the board <= 500 000
Sample tests
Sample test 1
Input
steve
Output
2
Sample test 2
Input
steven
Output
5
Sample test 3
Input
baobab
Output
3
Sample test 4
Input
..=.LoloL><424<>LoloL.=..
Output
0

$%$%$%$%$%$Bracket master
Description
Steve likes several kinds of brackets and parenthesis - (), [], {}, <> - 8 symbols in total.

He wants to use his knowledge to become the next bracket master. In order to do that, he should be able to count all possible valid bracket expressions consisted of N symbols.

In valid expressions each opening bracket (([{<) should be closed with a matching bracket ()]}>).

Examples:

()[] - valid
<{}> - valid
<(>) - invalid
Write a program which can be used to check his abilities.

Input
Input is read from the console
A number N is read from the first line
Output
Output should be printed on the console
Print the answer on a single line
Constraints
0 <= N <= 1024
Sample tests
Sample test 1
Input
2
Output
4
Sample test 2
Input
4
Output
32
Sample test 3
Input
3
Output
0

$%$%$%$%$%$Medians
Description
Write a program that supports three operations:

ADD number
Adds a number to a sequence
FIND
Finds the median of the sequence
EXIT
Stops the program
Median is defined as follows:

If the count of numbers in the sequence is odd:
The median is the middle number by value, not average
Example: the sequence 5 1 2 3 1 has median 2
If the count of numbers in the sequence is even:
The median is the average between the two middle values:
Example: the sequence 5 1 2 3 1 3 has median 2.5
Input
Read from the standard input

On each of the input, you will find one of the three commands
'ADD number' - perform ADD command
'FIND' - perform 'FIND' command and print the median
'EXIT' - stop reading commands
Output
Print to the standart output

Print the median for each FIND command
Constraints
The commands are always less than 131074
Each number is always between -2^15 and 2^15
Sample tests
Input
ADD 5
ADD 1
ADD 2
FIND
ADD 3
FIND
ADD 1
FIND
EXIT
Output
2
2.5
2
Input
ADD 5
ADD 1
FIND
ADD 2
FIND
ADD 3
ADD 1
FIND
ADD 3
FIND
EXIT
Output
3
2
2
2.5